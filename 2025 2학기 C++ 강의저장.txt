//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt" };

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}=======================================
저장시간 - //-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	out << "=======================================" << '\n';
	out << "저장시간 - ";
	auto 현재시각 = std::chrono::system_clock::now();
	std::cout << std::chrono::system_clock::to_time_t(현재시각) << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}===============================================
저장시간 - 2025-09-03 07:00:30.5691656
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	out << "===============================================" << '\n';
	out << "저장시간 - " << std::chrono::system_clock::now() << '\n';
	out << "===============================================" << '\n';
	out << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}

===============================================
저장시간 - 2025-09-03 16:03:41.6669912
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의소개, 맘이 없으면 얼른 변경하자. 공부하고 싶을때 하자
// ----------------------------------------------------------------------------------------------------------
// 컴파일 환경 - 버전 17.14.13 (August 2025)
// 프로젝트 환경 - 미리 보기 - 최신 C++ 초안의 기능(/std:c++latest)
//				 - C++ = SDL 검사 - 아니요
// 타겟 환경 - Release / x64
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>

int main()
{
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ "main.cpp" };		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	using namespace std::chrono_literals;
	out << '\n';
	out << "===============================================" << '\n';
	out << "저장시간 - " << std::chrono::system_clock::now() + 9h << '\n';
	out << "===============================================" << '\n';
	out << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}2570===============================================
저장시간 - 2025-09-03 16:20:56.9440232
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:23:49.8666555
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:23:49.8677808
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:23:49.8683715
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:26:36.4215716
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#pragma once
#include <string_view>

// 함수의 원형을 여기에 적는다 - 함수 선언(function declaration)
void save(std::string_view);
2570===============================================
저장시간 - 2025-09-03 16:26:36.4306595
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#include "save.h"
#include <string_view>
#include <fstream>
#include <chrono>
#include <iostream>

// coding convention을 알아보자 (낙타 스타일, 뱀 스타일)
void save( std::string_view fileName )
{
	std::cout << "\"" << fileName << "\"을 저장함" << '\n';
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ fileName.data()};		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	using namespace std::chrono_literals;
	out << '\n\n';
	out << "===============================================" << '\n';
	out << "저장시간 - " << std::chrono::system_clock::now() + 9h << '\n';
	out << "===============================================" << '\n';
	out << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}
2570===============================================
저장시간 - 2025-09-03 16:26:36.4319597
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:26:54.5592712
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#pragma once
#include <string_view>

// 함수의 원형을 여기에 적는다 - 함수 선언(function declaration)
void save(std::string_view);
2570===============================================
저장시간 - 2025-09-03 16:26:54.5685824
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#include "save.h"
#include <string_view>
#include <fstream>
#include <chrono>
#include <iostream>

// coding convention을 알아보자 (낙타 스타일, 뱀 스타일)
void save( std::string_view fileName )
{
	std::cout << "\"" << fileName << "\"를 저장함" << '\n';
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ fileName.data()};		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	using namespace std::chrono_literals;
	out << '\n\n';
	out << "===============================================" << '\n';
	out << "저장시간 - " << std::chrono::system_clock::now() + 9h << '\n';
	out << "===============================================" << '\n';
	out << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}
2570===============================================
저장시간 - 2025-09-03 16:26:54.5699217
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:29:40.4655848
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#pragma once
#include <string_view>

// 함수의 원형을 여기에 적는다 - 함수 선언(function declaration)
void save(std::string_view);
2570===============================================
저장시간 - 2025-09-03 16:29:40.4664802
===============================================

//--------------------------------------------------------------------
// 한학기 강의를 저장하기 위한 함수 save
//--------------------------------------------------------------------
#include "save.h"
#include <string_view>
#include <fstream>
#include <chrono>
#include <iostream>

// coding convention을 알아보자 (낙타 스타일, 뱀 스타일)
void save( std::string_view fileName )
{
	std::cout << "\"" << fileName << "\"를 저장함" << '\n';
	//main.cpp의 내용을 읽어 파일에 기록할거다.
	std::ifstream in{ fileName.data()};		// 'ifstream' 자체가 하나의 자료형.
	in >> std::noskipws;

	// 저장할 파일을 미리 열어 둔다.
	std::ofstream out{ "2025 2학기 C++ 강의저장.txt", std::ios::app };

	//파일에 저장한 시간을 기록하자.
	using namespace std::chrono_literals;
	out << '\n\n';
	out << "===============================================" << '\n';
	out << "저장시간 - " << std::chrono::system_clock::now() + 9h << '\n';
	out << "===============================================" << '\n';
	out << '\n';

	char c;						// 한 글자를 저장할 수 있는 메모리를 만든다.
	while (in >> c)				// 읽을 글자가 있는 동안 읽어서 c에 저장한다.
		out << c;				// out과 연결된 파일에 c로 읽어 온 글자를 출력(저장)한다.
}
2570===============================================
저장시간 - 2025-09-03 16:29:40.4678256
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// 강의저장 기능을 다른 파일로 분리한다.
// 저장하고 싶을 때 마다 함수를 불러 파일을 저장하도록 한다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <fstream>
#include <chrono>
#include "save.h"

//--------
int main()
//--------
{
	std::cout << "이제 강의 준비가 다 되었다" << '\n';

	save("save.h");
	save("save.cpp");
	save("main.cpp");
}2570===============================================
저장시간 - 2025-09-03 16:44:15.1248879
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.

//--------
int main()
//--------
{
	// C++ 프로그램은 프로그램이 시작하면 입출력을 하기 위한 객체
	// cout(모니터), cin(키보드), cerr(모니터), clog(모니터)를 자동생성한다.
	std::cout << "이름을 알려주세요 : ";
	std::string name;
	std::cin >> name;

	// 환영 메시지를 출력하라.
	std::cout << name << "님 환영합니다!" << '\n';

	save("main.cpp");
	
	}
2570===============================================
저장시간 - 2025-09-03 16:46:33.5979907
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 3 수요일                                             (1주 2일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <string>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.

//--------
int main()
//--------
{
	// C++ 프로그램은 프로그램이 시작하면 입출력을 하기 위한 객체
	// cout(모니터), cin(키보드), cerr(모니터), clog(모니터)를 자동생성한다.
	std::cout << "이름을 알려주세요 : ";
	std::string name;
	std::cin >> name;

	// 환영 메시지를 10번 출력하라.
	for (int i = 0; i < 10; ++i) {
		std::cout << name << "님 환영합니다!" << '\n';
	}

	save("main.cpp");
	
}
===============================================
저장시간 - 2025-09-08 13:56:51.2485873
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 = 7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::cout << dan << " x " << i + 1 << " = " << dan * (i + 1) << '\n';
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 13:59:04.7247694
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 = 7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		printf("%d x %d = %d\n", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:00:17.8058189
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 = 7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{} x {} = {}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:01:02.8087862
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{0} x {1} = {2}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:01:23.0215208
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{1} x {0} = {2}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:02:05.6954646
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{1} x {0} = {2:2d}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:02:29.6514958
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{1} x {0} = {2:10}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:03:09.9628282
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{1:^40} x {0} = {2:10}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}2570===============================================
저장시간 - 2025-09-08 14:03:54.7066486
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 이름을 입력받아 환영한다고 출력하자.
// [문제] 구구단을 출력하자.
// 몇 단을 원하는 지 물어 봐서 다음과 같은 형식으로 화면 출력하라.
// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "몇 단 ? ";
	int dan;
	std::cin >> dan;
	std::cout << dan << "단을 출력합니다" << '\n';

	for (int i = 0; i < 9; ++i) {
		std::println("{} x {} = {:2}", dan, i + 1, dan * (i + 1));
	}

	save("main.cpp");
	
}===============================================
저장시간 - 2025-09-08 14:09:16.2065538
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 구구단 전체를 출력하는 코드를 답지에 써라.
// 줄 맞춰 출력하라.

// 2 x 1 =  2 

// 단과 단은 한 줄 떼서 구분하라

// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "구구단을 출력합니다" << "\n\n";

	for (int j = 0; j < 9; ++j) {
		for (int i = 0; i < 9; ++i) {
			std::println("{} x {} = {:2}", j + 1, i + 1, (j + 1) * (i + 1));
		}
		std::cout << '\n';
	}

	save("main.cpp");
	
}

===============================================
저장시간 - 2025-09-08 14:13:28.9198456
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 구구단 전체를 출력하는 코드를 답지에 써라.
// 줄 맞춰 출력하라.

// 2 x 1 =  2 

// 단과 단은 한 줄 떼서 구분하라

// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "구구단을 출력합니다" << "\n\n";

	for (int j = 0; j < 9; ++j) {
		for (int i = 0; i < 9; ++i) {
			std::println("{} x {} = {:2}", j + 1, i + 1, (j + 1) * (i + 1));
		}
		std::cout << '\n';
	}

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:19:36.7737402
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// C++ I/O
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <print>
#include "save.h"

// [문제] 구구단 전체를 출력하는 코드를 답지에 써라.
// 줄 맞춰 출력하라.

// 2 x 1 =  2 

// 단과 단은 한 줄 떼서 구분하라

// 7 x 1 =  7
// 7 x 2 = 14
// 7 x 9 = 63

//--------
int main()
//--------
{
	std::cout << "구구단을 출력합니다" << "\n\n";

	for (int j = 0; j < 8; ++j) {
		for (int i = 0; i < 9; ++i) {
			std::println("{} x {} = {:2}", j + 2, i + 1, (j + 2) * (i + 1));
		}
		std::cout << '\n';
	}

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:22:44.4062439
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int가 저장할 수 있는 최댓값을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	int n = 1234;

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:28:46.9371108
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int가 저장할 수 있는 최댓값을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111;

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:29:21.8623412
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int가 저장할 수 있는 최댓값을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	int n = 0B01111111'11111111'11111111'11111111; // int는 4byte 짜리

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:32:03.6381283
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] unsigned int가 저장할 수 있는 최댓값을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	unsigned int n = 0B11111111'11111111'11111111'11111111;

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:33:09.3757418
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int가 저장할 수 있는 최댓값 + 1을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	int n = 0b01111111'11111111'11111111'11111111;
	n = n + 1;

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:34:34.3353302
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] int가 저장할 수 있는 최댓값을 저장하도록 하자.
// 화면에 그 값을 출력하자.

//--------
int main()
//--------
{
	//int n = 0b01111111'11111111'11111111'11111111;
	int n = 0x7F'FF'FF'FF;

	std::cout << "현재 n의 값은 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:40:41.9369011
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int값을 메모리 그대로 이진수로 출력하자.

//--------
int main()
//--------
{
	int n = 0x01'02'03'04;
	// --> 00000001000000100000001100000100

	std::cout << "현재 n의 값은 - " << n << '\n';

	std::bitset<32> bit = n;
	std::cout << "       이진수 - " << bit << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:40:56.0953216
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int값을 메모리 그대로 이진수로 출력하자.

//--------
int main()
//--------
{
	int n = 1024;
	// --> 00000001000000100000001100000100

	std::cout << "현재 n의 값은 - " << n << '\n';

	std::bitset<32> bit = n;
	std::cout << "       이진수 - " << bit << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:41:09.7873843
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int값을 메모리 그대로 이진수로 출력하자.

//--------
int main()
//--------
{
	int n = 1024 * 1024;
	// --> 00000001000000100000001100000100

	std::cout << "현재 n의 값은 - " << n << '\n';

	std::bitset<32> bit = n;
	std::cout << "       이진수 - " << bit << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:41:44.7896864
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int값을 메모리 그대로 이진수로 출력하자.

//--------
int main()
//--------
{
	int n = 1024 * 1024 * 1024;
	// --> 00000001000000100000001100000100

	std::cout << "현재 n의 값은 - " << n << '\n';

	std::bitset<32> bit = n;
	std::cout << "       이진수 - " << bit << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:42:12.1689287
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int값을 메모리 그대로 이진수로 출력하자.

//--------
int main()
//--------
{
	int n = 0x01020304;
	// --> 00000001000000100000001100000100

	std::cout << "현재 n의 값은 - " << n << '\n';

	std::bitset<32> bit = n;
	std::cout << "       이진수 - " << bit << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:48:00.5721056
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include "save.h"

// [문제] int의 최댓값을 저장하고 화면에 출력하라.

//--------
int main()
//--------
{
	int n = 0x7F'FF'FF'FF;

	std::cout << "int의 최댓값 - " << n << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:58:34.9093010
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

// [문제] int의 최댓값을 저장하고 화면에 출력하라.

//--------
int main()
//--------
{
	long long num = 0x7F'FF'FF'FF'FF'FF'FF'FF;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << num << '\n';
	std::cout << std::bitset<64>(num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:59:11.1359809
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << num << '\n';
	std::cout << std::bitset<32>(num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 14:59:44.9611127
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1.234;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << num << '\n';
	std::cout << std::bitset<32>(num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:00:25.1753211
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1.234;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>(num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:00:45.9041458
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1024.333444;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>(num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:01:22.3376665
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1024.333444;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>((long) num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:01:37.5171899
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1024.333;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>((long) num) << '\n';

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:02:42.1988767
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

//--------
int main()
//--------
{
	float num = 1024.333;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>((long) num) << '\n'; // float 메모리 찾아보기

	save("main.cpp");
}

===============================================
저장시간 - 2025-09-08 15:03:43.7851943
===============================================

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 8 수요일                                             (2주 1일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include<bitset>
#include<numeric>
#include "save.h"

// [실습] 다른 기본 자료형을 사용하여 연습하라.

//--------
int main()
//--------
{
	float num = 1024.333;
	//constexpr int n = std::numeric_limit<int>::max();

	std::cout << "float가 차지한 메모리 - " << sizeof num << '\n';
	std::cout << num << '\n';
	std::cout << std::bitset<32>((long) num) << '\n'; // float 메모리 찾아보기

	save("main.cpp");
}
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 10 수요일                                             (2주 2일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [실습] int값 2개를 입력받아 이것을 더한 결과를 내주는 함수
// add를 작성하여 결과를 출력하라.

int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration
int add(int, int); // 함수 선언문 - function declaration

// 함수 정의 - function definition - 메모리를 차지하는 코드
int add(int num1, int num2) {
	return num1 + num2;
}

//--------
int main()
//--------
{
	
	std::cout << "int 2개를 입력받아 합계를 계산하겠습니다" << '\n';

	while ( true ) {
		std::cout << "int 2개를 입력하세요 : ";
		int a, b;
		std::cin >> a >> b;

		std::cout << a << " + " << b << " = " << add(a, b) << '\n';
	}

	save("main.cpp");
}

// 함수란 무엇인가? - sub-routine, 코드 재활용, 함수의 protype(원형), 선언과 정의
// 모듈

int n;						// 이 문장의 의미 - 폰 노이만 구조
int n ;	<--- token 2개로 이루어진 특별한 문장
	변수 이름에 대한 정보는 어디에?

fundamental data
	1 : char
	2 : short int
	4 : long
	8 : long long

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 10 수요일                                             (2주 2일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n;				// int 자료형의 크기 만큼 메모리를 달라는 요청임
						// 메모리는 주소인데 주소대신 n 이라는 이름으로 access할 수 있게
						// 해 달라는 요청임

					// n 이라는 이름을 쓸 수 있는 이유는
					// 몇 번지 주소가 컴파일할때 결정되기 때문에

	// 우리는 언제나 내가 요청한 메모리의 정체를 파악할 수 있다
	// 1 - 크기는 몇 바이트인가?
	// 2 - 주소는 어디인가?
	// 3 - 자료형은 무엇인가?

	std::cout << "내가 요청한 n의 정체" << '\n';
	std::cout << "메모리 크기 - " << sizeof n << '\n';
	std::cout << "메모리 위치 - " << std::addressof(n) << '\n';
	std::cout << "자료형      - " << typeid(n).name() << '\n';


	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 10 수요일                                             (2주 2일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [실습] 프로그램에서 int 만큼 메모리를 요청한다.
// 이 메모리가 정해지는 section은 3군데가 있다.

int n;								// DATA		<-- 전역 (global)

//--------
int main()
//--------
{
	int n;							// STACK		<-- 지역 (local)

	new int;						// free-store	<-- 동적할당 (dynamic allocation)

	std::cout << "STACK    - " << std::addressof(n) << '\n';	// 지역변수는 번지수가  낮음
	std::cout << "DATA     - " << std::addressof(::n) << '\n';	// 전역변수는 번지수가 높음
											// 동적할당은 그 사이 어딘가

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 10 수요일                                             (2주 2일)
//-----------------------------------------------------------------------------------------------------------
// 자료형과 변수
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a, b, c, d;

	std::cout << "a의 주소 - " << std::addressof(a) << '\n';
	std::cout << "b의 주소 - " << std::addressof(b) << '\n';
	std::cout << "c의 주소 - " << std::addressof(c) << '\n';
	std::cout << "d의 주소 - " << std::addressof(d) << '\n';

	short e, f;
	std::cout << "e의 주소 - " << std::addressof(e) << '\n';
	std::cout << "f의 주소 - " << std::addressof(f) << '\n';

	//save("main.cpp");
}

다음 강의
	int num[1234];			// = 랜덤값, 여러개 

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n[40];			// int[40] <--- 이렇게 하는 언어도 있다.

	// 값을 화면에 출력해 보라.
	std::cout << "n의 자료형 - " << typeid(n).name() << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n[40] { };


	// 값을 출력
	for (int i = 0; i < 40; ++i) {
		std::cout << n[i] << '\n';
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n[40] { 1, 2, 3};		// {}는 initializer list 이다.


	// 값을 출력
	for (int i = 0; i < 40; ++i) {
		std::cout << n[i] << ' ';
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n[40] { };			// {}는 initializer list 이다.
						// 리스트에 아무 값이 없다면 자료형의 default 값으로 초기화한다.
						// fundamental data type의 default 값을 모든 bit를 0으로 한다.

	int a{};				// 이 문장은 초기화(initialization)다.
						// 객체를 만들면서 단 한번 설정하는 동작
	int b = 3;				// 이것도 초기화 문장이다.

	b = 3;				// assignment - 대입, 할당, 배정
	b = 333;
	b = 33333;


	// 값을 출력
	for (int i = 0; i < 40; ++i) {
		std::cout << n[i] << ' ';
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int n[40]{};

	// 값을 출력
	for ( int val : n ) {				// ranged-based for, range-for 루프, syntactic sugar
		std::cout << val << ' ';
	}

	std::cout << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 15 월요일                                             (3주 1일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 준비한다.
// 각 int값을 random(임의의, 제멋대로) 값으로 assign한다.
// 가장 큰 값이 무엇인지 찾아 화면에 출력하라.

std::default_random_engine dre;					// 랜덤 엔진		// std::mt19937 dre;
std::uniform_int_distribution uid {0, 9999'9999};			// 일정한 확률분포로

//--------
int main()
//--------
{
	int n[1000];

	for (int i = 0; i < 1'000; ++i)
		n[i] = uid(dre);

	std::cout << "각 1000개 모두 출력" << '\n';

	for (int num : n)
		std::print("{:10}", num);
	std::cout << '\n';

	// 가장 큰 값을 찾아 화면에 출력하라.
	// 모든 값을 반드시 1번은 비교해봐야 한다. O(N)

	int maxVal = std::numeric_limits<int>::min();

	for (int val : n) {
		if (maxVal < val) {
			maxVal = val;
		}
	}
	std::cout << "가장 큰 값 - " << maxVal << '\n';		// 9990'8038


	//save("main.cpp");
}

{ std::random_device()()} <--- 1학년은 힘듬

for (int val : n) <--- 찾아보기

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 17 수요일                                             (3주 2일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include <array>								// 추가됨
#include "save.h"

// [문제] int값 1000개를 저장할 메모리를 준비한다.
// 각 int값을 random(임의의, 제멋대로) 값으로 assign한다.
// 가장 큰 값이 무엇인지 찾아 화면에 출력하라.

std::mt19937 dre;											// 랜덤 엔진
std::uniform_int_distribution uid {0, 9999'9999};			// 일정한 확률분포로

//--------
int main()
//--------
{
	std::array<int, 1000> n;				// int n[1000] <--- 매우 원시적인 방법	// 앞으로는 사용하지 말아야 함.

	for (int i = 00; i < 1'000; ++i)
		n[i] = uid(dre);

	std::cout << "각 1000개 모두 출력" << '\n';

	for (int num : n)
		std::print("{:10}", num);
	std::cout << '\n';

	// 가장 큰 값을 찾아 화면에 출력하라.
	// 모든 값을 반드시 1번은 비교해봐야 한다. O(N)

	int maxVal = std::numeric_limits<int>::min();

	for (int i = 0; i < 1100; ++i) {
		if (maxVal < n[i]) {
			maxVal = n[i];
		}
	}
	std::cout << "가장 큰 값 - " << maxVal << '\n';		// 9990'8038


	//save("main.cpp");
}

내가 한 버전

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 17 수요일                                             (3주 2일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// int 1000개가 있는데 사용자가 찾고자 하는 int값을 물어봐서 있는지 없는지 알려주자.

std::mt19937 dre;
std::uniform_int_distribution uid {0, 9999};

//--------
int main()
//--------
{
	int n[1000];
	bool found;

	for (int i = 00; i < 1'000; ++i)
		n[i] = uid(dre);

	std::cout << "각 1000개 모두 출력" << '\n';

	for (int num : n)
		std::print("{:8}", num);
	std::cout << '\n';

	// [실습] 찾는 int값을 물어보고 있는지 없는지 알려주자.
	
	while (true) {
		found = false;
		std::cout << "찾을 int값은? : ";
		int num;
		std::cin >> num;
		for (int i = 0; i < 1000; ++i) {
			if (num == n[i]) {
				std::cout << num << " 존재함" << '\n';
				found = true;
				break;
			}
		}
		if (!found) std::cout << "존재하지 않음" << '\n';
	}


	//save("main.cpp");
}

교수님 ver.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 17 수요일                                             (3주 2일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

// int 1000개가 있는데 사용자가 찾고자 하는 int값을 물어봐서 있는지 없는지 알려주자.

std::mt19937 dre;
std::uniform_int_distribution uid {0, 999};

//--------
int main()
//--------
{
	int n[1000];

	for (int i = 00; i < 1'000; ++i)
		n[i] = uid(dre);

	std::cout << "각 1000개 모두 출력" << '\n';

	for (int num : n)
		std::print("{:8}", num);
	std::cout << '\n';

	// [실습] 찾는 int값을 물어보고 있는지 없는지 알려주자.
	
	while (true) {
		std::cout << "찾을 int값은? : ";
		int num;
		std::cin >> num;

		bool flag{ false };

		for (int val : n) {
			if (val == num) {											// keywords ---> not_equal 찾아보기
				flag = true;
				break;
			}
		}
		// 찾았다면 바로 여기로 오면 된다.
		// 찾아서 여기 온건지, 못찾아서 여기 온건지 구분이 안된다.
		if (flag) {
			std::cout << num << "를 찾았습니다" << '\n';
		}
		else {
			std::cout << num << " 없는 수 입니다" << '\n';
		}
	}

	//save("main.cpp");
}

내가 만든 ver.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 17 수요일                                             (3주 2일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

#define MAX 100'0000

std::mt19937 dre;
std::uniform_int_distribution uid {1, 6};

// [문제] 주사위를 100만번 던졌다.
// 각 숫자가 나온 확률을 계산해서 화면에 출력하라.

//--------
int main()
//--------
{
	int n[MAX];
	int count[6]{};

	for (int i = 0; i < MAX; ++i) {
		n[i] = uid(dre);
		count[n[i] - 1]++;
	}

	for (int i = 0; i < 6; ++i) {
		//std::cout << float(count[i]) / (MAX / 100) << '%' << '\n';
		std::print("{:.2f}", float(count[i]) / (MAX / 1000));
		std::cout << "%" << '\n';
	}

	//save("main.cpp");
}

교수님 ver.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 17 수요일                                             (3주 2일)
//-----------------------------------------------------------------------------------------------------------
// 많은 수의 동일한 자료형을 갖는 객체가 있다.
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include <random>
#include <print>
#include "save.h"

std::mt19937 dre;
std::uniform_int_distribution uid {1, 6};

// [문제] 주사위를 100만번 던졌다.
// 각 숫자가 나온 확률을 계산해서 화면에 출력하라.

//--------
int main()
//--------
{
	int num[6]{};

	for (int i = 0; i < 100'0000; ++i) {
		num[uid(dre) - 1]++;
	}

	for (int i = 0; i < 6; ++i) {
		std::println("{}의 확률 - {:.2f}", i+1, 100.f*num[i]/100'0000);
	}
	
	//save("main.cpp");
}

내가 만든건 배열에 주사위 결과를 저장하면서 갯수를 셈. 저장 필요 없이 갯수만 셀 경우에는 교수님 코드가 ^0^b 

2025.09.22

지역변수란? 
	-함수같은 특정 '블록'에서 선언되어서, 그 블록 내에서만 접근가능한 변수, global(전역) 변수가 아닌 모든 변수

scope, 메모리 효율, life cycle(생명주기)

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역변수란 무엇인가요? - (), {} <--- 같은 블록 에서 선언된 변수
// 지역변수 어느 메모리영역에 있나요? -> STACK segment
// 지역변수는 얼마만큼 만들고 사용할 수 있나요(메모리 한계)
// 한계를 넘게되면(실행중) 어떻게 되나요?


//--------
int main()
//--------
{
	int n{ 1 };

	{
		int n{ 2 };
		{
			int n{ 3 };
			std::cout << n << '\n';
		}
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역변수란 무엇인가요? - (), {} <--- 같은 블록 에서 선언된 변수
// 지역변수 어느 메모리영역에 있나요? -> STACK segment
// 지역변수는 얼마만큼 만들고 사용할 수 있나요(메모리 한계)
// 한계를 넘게되면(실행중) 어떻게 되나요?

int n{ 20250922 };

//--------
int main()
//--------
{
	int n{ 1 };

	{
		int n{ 2 };
		{
			int n{ 3 };
			std::cout << ::n << '\n';
		}
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역변수란 무엇인가요? - (), {}		<--- 같은 블록 에서 선언된 변수
// 지역변수 어느 메모리영역에 있나요? -> STACK segment
// 지역변수는 얼마만큼 만들고 사용할 수 있나요(메모리 한계)		<--- 스택영역 크기에 따라 결정됨. 비주얼 스튜디오는 1MB(기본설정)
// 한계를 넘게되면(실행중) 어떻게 되나요?

int n;					// global variable

//--------
int main()
//--------
{
	//int n[1'000];			// 4KB ( = KB(0:3개) * 4byte(int) )
	//int n[10'000];		// 40KB
	//int n[100'000];		// 400KB
	//int n[1'000'000];		// 4MB
	//int n[10'000'000];	// 40MB
	int n[100'000'000];		// 400MB <--- 한계 1MB라매?


	std::cout << "이 정도는 끄떡없다" << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 지역변수란 무엇인가요? - (), {}		<--- 같은 블록 에서 선언된 변수
// 지역변수 어느 메모리영역에 있나요? -> STACK segment
// 지역변수는 얼마만큼 만들고 사용할 수 있나요(메모리 한계)		<--- 스택영역 크기에 따라 결정됨. 비주얼 스튜디오는 1MB(기본설정)
// 한계를 넘게되면(실행중) 어떻게 되나요? - stackoverflow (※동명의 사이트 이름도 있다)


//--------
int main()
//--------
{

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [질문] 지역변수는 어떻게 사용되나요?				
// [문제] 프로그램 실행 중에 stack을 넘치게 해보자.

int cnt{};

void f();

void f()
{
	//int n[10'000];			// 40KB

	std::cout << "f 호출 - " << ++cnt << '\n';
	f();					// recursive function call (재귀함수)
}

//--------
int main()
//--------
{
	f();

	//save("main.cpp");
}

============================================

int f()
{
	int n[10'000];			// 40KB

	std::cout << "f 호출 - " << ++cnt << '\n';
	f();					// recursive function call (재귀함수)
	return 20250922;
}

int n[10'000];			// 40KB

============================================

int f()
{
	int n[10'000]{1, 2, 3};			// 40KB

	std::cout << "f 호출 - " << ++cnt << ", n[0] - " << n[0] << '\n';
	f();					// recursive function call (재귀함수)
	return 20250922;
}

============================================

int f()
{
	int n[10'000];			// 40KB

	std::cout << "f 호출 - " << ++cnt << ", n[0] - " << n[0] << '\n';
	f();					// recursive function call (재귀함수)
	return 20250922;
}

결과와 원인은 직접 찾아보기

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역메모리의 한계는 얼마인가요?

char c[100'000'000];

//--------
int main()
//--------
{
	std::cout << "전역 c의 크기 - " << sizeof c << '\n';

	//save("main.cpp");
}

char c[2'147'483'647];				// 2GB

char c[2'147'483'648];				// 2GB

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// 변수와 메모리
// ----------------------------------------------------------------------------------------------------------

#include <iostream>
#include "save.h"

// [문제] 전역메모리의 한계는 얼마인가요?

char c[2'147'483'647];				// 2GB

//--------
int main()
//--------
{
	std::cout << "전역 c의 크기 - " << sizeof c << '\n';
	for (int i = 0; i < 100; ++i) {
		std::cout << c[i] << ' ';
	}

	//save("main.cpp");
}

===========================================

char c[1'147'483'647];	// 전역변수는 자동 {}

//--------
int main()
//--------
{
	std::cout << "전역 c의 크기 - " << sizeof c << '\n';
	for (int i = 0; i < 100; ++i) {
		std::cout << static_cast<char>(c[i] + 'a') << ' ';
	}

	//save("main.cpp");
}

<--- 실행파일 크기 190KB
===========================================

char c[1'900'000'000] { 1, 2, 3};	// 전역변수는 자동 {}

//--------
int main()
//--------
{
	std::cout << "전역 c의 크기 - " << sizeof c << '\n';
	for (int i = 0; i < 100; ++i) {
		std::cout << static_cast<char>(c[i] + 'a') << ' ';
	}

	//save("main.cpp");
}

<--- 실행파일 크기 1.9GB

차이가 나는 이유는?

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
// ----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 22 월요일                                             (4주 1일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
// ----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"


//--------
int main()
//--------
{
	int a{ 1 };
	int b{ 2 };

	// 여기서 a와 b의 값을 서로 바꾼다.(직접)
	int temp{ a };						// { } <--- 유의하기
	a = b;
	b = temp;

	std::cout << a << ", " << b << '\n';		// 2, 1 이라고 출력하면 성공

	//save("main.cpp");
}

// 여기서 a와 b의 값을 서로 바꾸는 함수를 작성 - 다음 시간.

============================================================================================================= 25.09.24

함수, 포인터, 레퍼런스란 무엇인가?

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 24 수요일                                             (4주 2일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// 함수의 선언
void change(int*, int*);		// int*는 int의 주소를 의미함( integer pointer 라고 읽음 )

void change(int *a, int *b)
{
	int temp{ *a };				// *의 역참조연산자(dereference operator)
	*a = *b;
	*b = temp;
	// return;
}

//--------
int main()
//--------
{
	int a{ 1 };
	int b{ 2 };

	// 여기서 a와 b의 값을 서로 바꾸는 함수 change를 작성 하라.
	change(&a, &b);				// &a -> a의 실제주소를 얻는 동작



	std::cout << a << ", " << b << '\n';		// 2, 1 이라고 출력하면 성공

	//save("main.cpp");
}

#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// 포인터 -> 주소를 저장하기 위한 자료형과 변수
	int a{ 1 };
	int* p;						// 정의, 선언 구분 확실하게 하기
								// 포인터의 크기 알아보기

	p = &a;						// p에 a의 주소를 assign
	*p = 20250924;				// p가 가르키는 메모리에 write

	std::cout << a << '\n';

	//save("main.cpp");
}

// 포인터의 용도 <--- 다른곳에 있는 것에 접근하기 위해서

#include <iostream>
#include "save.h"

void change(int*, int*);

//--------
int main()
//--------
{
	int a[]{ 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };
	
	// [문제] 제일 작은 값을 제일 오른쪽으로 옮겨라.
	for (int i = 0; i < 10 - 1; ++i) {
		if (a[i] < a[i + 1]) {
			change(&a[i], &a[i + 1]);
		}
	}

	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';


	//save("main.cpp");
}

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 24 수요일                                             (4주 2일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int*, int*);

//--------
int main()
//--------
{
	int a[]{ 1, 3, 5, 7, 9, 2, 4, 6, 8, 10 };
	
	// [문제] a의 값을 오름차순으로 정렬하라.
	for (int j = 0; j < 10 - 1; ++j) {
		for (int i = 0; i < 10 - 1 - j; ++i) {
			if (a[i] > a[i + 1]) {
				change(&a[i], &a[i + 1]);
			}
		}
	}

	// 정렬한 후 출력
	for (int num : a) {
		std::cout << num << ' ';
	}
	std::cout << '\n';

	//save("main.cpp");
}

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

// 다음 수업 내용 

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 24 수요일                                             (4주 2일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int*, int*);

// [문제] 랜덤 int값 10'000개가 있다.
// 오름차순으로 정렬한 후 화면에 출력하자.

std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 9'9999 };

int num[10'000];

//--------
int main()
//--------
{
	for (int i = 0; i < 10'000; ++i) {
		num[i] = uid(dre);
	}

	// 여기서 오름차순(ascending order)으로 정렬(sorting)하라

	// 정렬 후 출력
	for (int num : num) {
		std::print("{:8}", num);
	}
	std::cout << '\n';


	//save("main.cpp");
}

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

============================================================================================================= 25.09.29

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// change - 두 개 변수의 값을 바꾼다.
// pointer, reference - 원격조종하기 위한 도구
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <print>
#include "save.h"

void change(int*, int*);

// [문제] 랜덤 int값 20'0000개가 있다.
// 오름차순으로 정렬한 후 화면에 출력하자.

std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 9'9999 };

const int NUM{ 20'0000 };							// const <--- ROM(Read Only Memory, 읽기 전용 메모리)

int num[NUM];

//--------
int main()
//--------
{
	for (int i = 0; i < NUM; ++i) {
		num[i] = uid(dre);
	}

	// 여기서 오름차순(ascending order)으로 정렬(sorting)하라
	for (int j = NUM - 1; j > 0; --j) {				// for (int j = 0; j < NUM - 1; ++j)
		for (int i = 0; i < j; ++i) {				// i < NUM - 1;
			if (num[i] > num[i + 1]) {
				change(&num[i], &num[i + 1]);
			}
		}
	}

	// 정렬 후 출력
	for (int num : num) {
		std::print("{:8}", num);
	}
	std::cout << '\n';


	//save("main.cpp");
}

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference
// qsort
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	int a{ 1 };

	int& r{ a };
	r = 20250929;

	std::cout << a << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference
// qsort
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

//--------
int main()
//--------
{
	// [문제] a와 r의 정체를 밝혀주세요.

	int a{ 1 };

	int& r{ a };
	r = 20250929;

	
	std::cout << "a의 크기 - " << sizeof a << '\n';
	std::cout << "a의 주소 - " << std::addressof(a) << '\n';
	std::cout << "a의 타입 - " << typeid(a).name() << '\n';
	std::cout << '\n';
	std::cout << "r의 크기 - " << sizeof r << '\n';					// 컴퓨터는 sizeof a라고 알아듣는다.
	std::cout << "r의 주소 - " << std::addressof(r) << '\n';			//
	std::cout << "r의 타입 - " << typeid(r).name() << '\n';			//

	//save("main.cpp");
}

// 결과는 둘다 똑같이 나옴
// r은 adml alias(별명, 별칭)
// int& r{ a }; <--- r의 메모리를 새로 할당받는 것이 아님. (aka. a가 사는곳에 불법전입신고)
// &(레퍼런스)는 *(포인터)가 짜증나서 만들었다.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference
// qsort
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int*, int*);

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

//--------
int main()
//--------
{
	// [문제] a와 r의 정체를 밝혀주세요.

	int a{ 1 }, b{ 2 };

	change(&a, &b);

	std::cout << a << ", " << b << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference
// qsort
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

void change(int&, int&);

void change(int& x, int& y)					// x, y <--- 실체가 없음. 함수가 호출되면 x -> a의 별명, y -> b의 별명이 됨.
{
	int temp{ x };
	x = y;
	y = temp;
}

//--------
int main()
//--------
{
	// [문제] a와 r의 정체를 밝혀주세요.

	int a{ 1 }, b{ 2 };

	change( a, b );

	std::cout << a << ", " << b << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference - 실제 메모리에 붙인 별명(alias) - 실체가 없는 data type
// qsort - 정렬잘 하는 전문 알고리즘 함수
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <print>
#include "save.h"

// C++언어에서 같은 이름의 함수를 사용할 수 있다 - 함수오버로딩(overloading)
// 호출할때 인자를 살펴보면 어떤 함수를 부르는지 알 수 있기 때문에
void change(int*, int*);
void change(int&, int&);

void change(int& a, int& b)
{
	int temp{ a };
	a = b;
	b = temp;
}

void change(int* p, int* q)
{
	int temp{ *p };
	*p = *q;
	*q = temp;
}

// [문제] 랜덤 int값 20'0000개가 있다.
// 오름차순으로 정렬한 후 화면에 출력하자.

std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 9'9999 };

const int NUM{ 20'0000 };							// const <--- ROM(Read Only Memory, 읽기 전용 메모리)

int num[NUM];

//--------
int main()
//--------
{
	for (int i = 0; i < NUM; ++i) {
		num[i] = uid(dre);
	}

	// 여기서 오름차순(ascending order)으로 정렬(sorting)하라
	for (int j = NUM - 1; j > 0; --j) {
		for (int i = 0; i < j; ++i) {
			if (num[i] > num[i + 1]) {
				change( num[i], num[i + 1]);
			}
		}
	}

	// 정렬 후 출력
	for (int num : num) {
		std::print("{:8}", num);
	}
	std::cout << '\n';


	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference - 실제 메모리에 붙인 별명(alias) - 실체가 없는 data type
// qsort - 정렬잘 하는 전문 알고리즘 함수
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <print>
#include "save.h"

int 오름차순(const void* a, const void* b);

// [문제] 랜덤 int값 10'0000개가 있다.
// 오름차순으로 정렬한 후 화면에 출력하자.

std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 9'9999 };

const int NUM{ 100'0000 };							// const <--- ROM(Read Only Memory, 읽기 전용 메모리)

int num[NUM];										// int [] <--- contiguous(인접한) memory (<-> continuous)
													//              (공간의 연속성)             (시간의 연속성)

//--------
int main()
//--------
{
	for (int i = 0; i < NUM; ++i) {
		num[i] = uid(dre);
	}

	// 오름차순 정렬할 때 쓰는 실제 코드의 예
	// 버블소트 - O(N^2)
	// qsort   - O(NlogN)
	qsort(num, NUM, sizeof(int), 오름차순);			// num : 시작번지, NUM : 개수, sizeof(int) : 사이즈(간격), 오름차순 : 사용자가 원하는 방식

	// 정렬 후 출력
	for (int num : num) {
		std::print("{:8}", num);
	}
	std::cout << '\n';


	//save("main.cpp");
}

int 오름차순(const void* a, const void* b)
{
	int x = *(int*)a;
	int y = *(int*)b;
	if (x < y)
		return -1;
	if (x > y)
		return 1;
	return 0;
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					9. 29 월요일                                             (5주 1일)
//-----------------------------------------------------------------------------------------------------------
// reference - 실제 메모리에 붙인 별명(alias) - 실체가 없는 data type
// qsort - 정렬잘 하는 전문 알고리즘 함수
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <print>
#include "save.h"

// [문제] 랜덤 int값 10'0000개가 있다.
// 오름차순으로 정렬한 후 화면에 출력하자.

int 오름차순(const void* a, const void* b);

// 이 함수는 qsort가 자기가 정렬할 2개의 원소를 어떻게 정렬하면 좋은지 물어보는 함수
// const - 내가 넘겨준 메모리 번지를 읽기억세스만 하겠다는 약속
// void* - quick sort 함수는 내가 정렬하려고 하는 메모리의 원소가 어떤 자료형인지 알 수 없다.
//		   그런데 오름차순함수는 이 원소가 int임을 당연히 알고 있다.
//		   void*의 의미는 그래서 마음대로 자료형을 변경해도 좋다는 의미이다.

int 오름차순(const void* a, const void* b)
{
	int x = *(int*)a;
	int y = *(int*)b;

	// std::cout << x << " <=> " << y << '\n';

	if (x < y)
		return -1;
	if (x > y)
		return 1;
	return 0;
}

std::default_random_engine dre;
std::uniform_int_distribution uid{ 1, 9'9999 };

const int NUM{ 10'0000 };							// const <--- ROM(Read Only Memory, 읽기 전용 메모리)

int num[NUM];

//--------
int main()
//--------
{
	for (int i = 0; i < NUM; ++i) {
		num[i] = uid(dre);
	}

	// 오름차순 정렬할 때 쓰는 실제 코드의 예
	// 버블소트 - O(N^2)
	// qsort   - O(NlogN)
	qsort(num, NUM, sizeof(int), 오름차순);

	// 정렬 후 출력
	for (int num : num) {
		std::print("{:8}", num);
	}
	std::cout << '\n';


	//save("main.cpp");
}

============================================================================================================= 25.10.01

// 10/27 - 8주 1일 중간시험

// 내가 한 ver.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// qsort
// 동적할당 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <print>
#include "save.h"

// [문제] pangram에 저장된 문자를 오름차순으로 정렬하고 화면 출력하라.

char pangram[] { "The quick brown fox jumps over the lazy dog"};

int ascending_order(const void* a, const void* b)
{
	char x = *(char*)a;
	char y = *(char*)b;

	if (x < y)
		return -1;
	if (x > y)
		return 1;
	return 0;
}

//--------
int main()
//--------
{
	qsort(pangram, sizeof(pangram) / sizeof(char), sizeof(char), ascending_order);

	for (char word : pangram) {
		std::print("{}", word);
	}
	std::cout << '\n';

	//save("main.cpp");
}

// 문자열 오름차순 정렬 교수님 ver.

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// qsort
// 동적할당 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] pangram에 저장된 문자를 오름차순으로 정렬하고 화면 출력하라.

char pangram[] { "The quick brown fox jumps over the lazy dog" };

int 방법(const void*, const void*);

int 방법(const void* a, const void* b)
{
	return *(char*)a - *(char*)b;
}

//--------
int main()
//--------
{
	qsort( &pangram[0], sizeof pangram - 1, sizeof(char), 방법);

	for ( char 글자 : pangram) {
		std::cout << 글자 << "-";
	}
	std::cout << '\n';

	//save("main.cpp");
}

// 교수님 ver.2

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// qsort
// 동적할당 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] pangram에 저장된 문자를 오름차순으로 정렬하고 화면 출력하라.

char pangram[] { "The quick brown fox jumps over the lazy dog" };

int 방법(const void*, const void*);

int 방법(const void* a, const void* b)
{
	char c = *(char*)a;
	char d = *(char*)b;

	if (c < d)
		return -1;
	else if (c > d)
		return 1;

	return 0;
}

//--------
int main()
//--------
{
	qsort( pangram, sizeof pangram - 1, 1, 방법);	// sizeof(char) = 1		// qsort() <-- generic function(일반적 함수)
																			// qsort() <- char,int,Monster,Dog 등 아무(어떤) 자료형을 가져다 주든 작동함.

	
	std::cout << pangram;
	
	std::cout << '\n';

	//save("main.cpp");
}

// 람다
// qsort(pangram, sizeof pangram - 1, 1, [](char a, char b) -> int { return a < b; });

// code, data, stack은 compile-time(반의어 : run-time)에 결정
//		이름 사용 OK


// free store은 run-time에 결정되는 memory
//		이름 사용할 수 없다(아직 만들어 지지도 않았기 때문)

// 메모리 3요소 : 시작번지, 전체크기, 하나하나 크기

// new int[num]; <--- 시작번지를 알려줌

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	std::cout << "필요한 int 메모리의 수는? ";
	int num;
	std::cin >> num;

	int* 시작번지= new int[num];
	
	for (int i = 0; i < num; ++i) {
		*(시작번지 + i)= i + 1;
	}
	
	for (int i = 0; i < num; ++i) {
		std:: cout << 시작번지[i] << " ";		// 마치 배열처럼
	}
	std::cout << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	std::cout << "필요한 int 메모리의 수는? ";
	int num;
	std::cin >> num;

	int* 시작번지= new int[num];
	
	for (int i = 0; i < num; ++i) {
		*(시작번지 + i)= i + 1;
	}

	// 합계
	int sum{};
	for (int i = 0; i < num; ++i) {
		sum += 시작번지[i];
	}
	std::cout << "1부터 " << num << "까지의 합계 - " << sum << '\n';

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 월요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	while ( true ) {
		std::cout << "필요한 int 메모리의 수는? ";
		int num;
		std::cin >> num;

		int* 시작번지 = new int[num];

		for (int i = 0; i < num; ++i) {
			*(시작번지 + i) = i + 1;
		}

		// 합계
		int sum{};
		for (int i = 0; i < num; ++i) {
			sum += 시작번지[i];
		}
		std::cout << "1부터 " << num << "까지의 합계 - " << sum << '\n';
		
		// new와 delete는 짝이 맞아야 한다
		// 메모리는 매우 귀중한 자원이다. 나 혼자 독점해서 사용할 수 없다.
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 1 수요일                                             (5주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	while ( true ) {
		int* 주소 = new int[100];
		// new와 delete는 짝이 맞아야 한다
		// 메모리는 매우 귀중한 자원이다. 나 혼자 독점해서 사용할 수 없다.
		delete[] 주소;
	}

	//save("main.cpp");
}

// fundemental data type

// effective C++, effective modern C++ 교수님추천 책

============================================================================================================= 25.10.13

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 이미 다 공부한 것과 같이 아래와 같은 코딩을 하면 안된다
// 이건 단지 답지 작성에 편하라고 쓴 것이다.
using namespace std;

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	//save("main.cpp");

	while (true) {
		cout << " int 몇 개가 필요한가요? ";
		unsigned num;		// 음수 방지		// stack
		cin >> num;

		int val[num];		// 빨간줄이 난 이유는? <------------------------ <중요>
		// new int[num];    // ==> 시스템(os)(Memory Manager)에 메모리 요청
	}
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 이미 다 공부한 것과 같이 아래와 같은 코딩을 하면 안된다
// 이건 단지 답지 작성에 편하라고 쓴 것이다.
using namespace std;

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	//save("main.cpp");

	while (true) {
		cout << " int 몇 개가 필요한가요? ";
		unsigned num;		// 음수 방지
		cin >> num;

		// 시스템에 필요한 메모리를 요청한다.
		// 성공 - 시작번지를 알려준다.
		// 실패 - 자원이 고갈되었다는 예외를 던진다.
		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i) {
			*(p+i) = i + 1;					// p[i]의 의미는 ==> *(p + sizeof(int)*i)
											// p[i] <-- 는 실제로는 존재하지 않는다. 사용자의 편의를 위해 존재하는 syntatic sugar
		}
	}
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
// 이미 다 공부한 것과 같이 아래와 같은 코딩을 하면 안된다
// 이건 단지 답지 작성에 편하라고 쓴 것이다.
using namespace std;

// [문제] 몇 개의 int값을 저장할 메모리가 필요한지 사용자에게 물어본다.
// 필요한 만큼 메모리를 확보해서 그 값을 1부터 시작하는 값으로 채워라.
// 메모리의 값을 모두 더한 후 화면에 출력하라.

//--------
int main()
//--------
{
	//save("main.cpp");

	while (true) {
		cout << " int 몇 개가 필요한가요? ";
		unsigned num;
		cin >> num;

		// 시스템에 필요한 메모리를 요청한다.
		// 성공 - 시작번지를 알려준다.
		// 실패 - 자원이 고갈되었다는 예외를 던진다.
		int* p;
		p = new int[num];

		for (int i = 0; i < num; ++i) {
			*(p+i) = i + 1;
		}

		int sum{};

		// for ( int num : p )	// <--- 왜 p에 빨간줄이 쳐지는가? p는 범위가 아니기 때문
		for (int i = 0; i < num; ++i) {
			sum += p[i];
		}

		cout << "1 부터 " << num << " 까지 합계 = " << sum << std::endl;
	}
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 메모리 얼마만큼 쓸 수 있나?

//--------
int main()
//--------
{
	//save("main.cpp");

	int cnt{};
	while (true) {
		new char[1'000'000'000];

		cout << ++cnt << "기가 바이트 할당 성공" << endl;
	}
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 메모리 얼마만큼 쓸 수 있나?

//--------
int main()
//--------
{
	//save("main.cpp");

	// 메모리와 같이 귀중한 자원은 항상 다음과 같은 단계를 거쳐 사용한다.
	// 1 - 자원확보		new		/ new[]
	// 2 - 자원이용		p[i]
	// 3 - 자원반환		delete	/ delete[]

	int cnt{};
	while (true) {
		// 메모리 요청은 실패할 수 있다.
		try {
			new char[1'000'000'000];
		}
		catch ( const std::exception& e ) {
			cout << "메모리가 고갈되었군!" << endl;
			cout << e.what() << endl;
			// return 20251013;
			exit(20251013);
		}

		cout << ++cnt << "기가 바이트 할당 성공" << endl;
	}
}

// 시스템 확실하게 죽이기, 즉사시키기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

// [문제] 메모리 얼마만큼 쓸 수 있나?

//--------
int main()
//--------
{
	//save("main.cpp");

	char* p;
	p = new char[1000];

	delete[] p;		// 이때 이미 p는 dangling pointer이다.
	delete[] p;
	
}

// 멍청한 포인터
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	//save("main.cpp");

	// 자원 할당 - 수 많은 공간과 시간 - 자원 반환
	// 자동화하기 위한 기법 - RAII

	int *p = new int[1000];

	// p를 raw-pointer라고 부른다.

}

// 스마트포인터
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// 동적할당(Dynamic Allocation) 메모리
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	//save("main.cpp");

	// 자원 할당 - 수 많은 공간과 시간 - 자원 반환
	// 자동화하기 위한 기법 - RAII

	// 스마트포인터로 해결 - C++11
	unique_ptr<int[]> p{ new int[1000] };

}

// 파일 입출력 시작
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

//--------
int main()
//--------
{
	//save("main.cpp");

	ofstream out{ "처음만든파일.txt" };

	for (int i = 0; i < 1000; ++i) {
		out << i + 1 << "   ";
	}
	out << endl;
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 13 월요일                                             (6주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	//save("main.cpp");
}

// 메모리 data & free store, endian, dangling pointer, RAII

============================================================================================================= 25.10.15

// 파일읽기 일부러 실패해보기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	// 파일과 연결점을 만든다. - file open
	std::ifstream in{ "처음만든파일.tx" };		// 일부로 .txt에서 t 빼기

	// 이 동작은 성골할 수도 있고 실패할 수도 있어서 반드시 검사해야 한다.
	if (not in) {		// 실패했을 경우
		cout << "파일을 열 수 없습니다" << endl;
		return 20251015;
	}


	//save("main.cpp");
}

// 파일에 있는 데이터(int) 첫 1개 읽어오기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	// 파일과 연결점을 만든다. - file open
	ifstream in{ "처음만든파일.txt" };

	// 이 동작은 성골할 수도 있고 실패할 수도 있어서 반드시 검사해야 한다.
	if (not in) {		// 실패했을 경우
		cout << "파일을 열 수 없습니다" << endl;
		return 20251015;
	}

	// 이제 in을 이용해서 파일에 있는 자료를 읽어올 수 있다.

	int num;
	in >> num;		// 마치 "cin >> num;" 처럼		// 공백(ws)은 무시(eating)한다
	cout << "파일에 있는 첫 int의 값 - " << num << endl;

	//save("main.cpp");
}

// 파일에 있는 데이터(int) 50개 읽어오기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	ifstream in{ "처음만든파일.txt" };

	if (not in) {
		return 20251015;
	}

	int num;
	for (int i = 0; i < 50; ++i) {
		in >> num;
		cout << num << " --- ";
	}
	cout << endl;
	
	//save("main.cpp");
}

// 파일에 있는 데이터(int) 500개 읽어오기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	ifstream in{ "처음만든파일.txt" };

	if (not in) {
		return 20251015;
	}

	int num;
	for (int i = 0; i < 500; ++i) {
		in >> num;
		cout << num << " --- ";
	}
	cout << endl;
	
	//save("main.cpp");
}

// 파일에 있는 데이터(int) 10000개 읽어오기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	ifstream in{ "처음만든파일.txt" };

	if (not in) {
		return 20251015;
	}

	int num;
	for (int i = 0; i < 10000; ++i) {
		in >> num;
		cout << num << " --- ";
	}
	cout << endl;
	
	//save("main.cpp");
}

// 파일에 있는 데이터 끝까지 읽어오기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <print>
#include "save.h"
using namespace std;

// [문제] "처음만든파일.txt"에는 몇 개인지 모르는 int가 저장되어 있다.
// 읽어서 화면에 출력하라.

//--------
int main()
//--------
{
	ifstream in{ "처음만든파일.txt" };

	if (not in) {
		return 20251015;
	}

	int num;
	while (in >> num) {			// while ( (in >> num) == true )
		print("{:8}", num);
	}
	
	//save("main.cpp");
}

// "몇개인지모르는int" 파일 생성하기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <random>
#include <fstream>
#include "save.h"
using namespace std;

default_random_engine dre;
uniform_int_distribution uid{ -20'0000'0000, 20'0000'0000 };

const int NUM{ 1000'0000 };

//--------
int main()
//--------
{
	ofstream out{ "몇개인지모르는int" };

	for (int i = 0; i < NUM; ++i) {
		out << uid(dre) << " ";
	}


	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "몇개인지모르는int"에 int가 저장되어 있다.
// 모두 몇 개인지 출력하라.			1000'0000
// 가장 큰 값을 찾아 화면에 출력하라.	19'9999'9812
// 가장 작은 값을 찾아라.				-19'9999'9882

//--------
int main()
//--------
{
	std::ifstream in{ "몇개인지모르는int" };

	if (not in) {
		return 20251510;
	}

	int num;
	int cnt = 0;
	int max_num;
	int min_num;

	in >> num;
	max_num = num;
	min_num = num;
	cnt++;
	while (in >> num) {
		if (max_num < num) {
			max_num = num;
		}
		else if (min_num > num) {
			min_num = num;
		}
		cnt++;
	}

	cout << "int의 개수		: " << cnt << endl;
	cout << "가장 큰 int		: " << max_num << endl;
	cout << "가장 작은 int		: " << min_num << endl;

	//save("main.cpp");
}

// 교수님 ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <numeric>
#include "save.h"
using namespace std;

// [문제] "몇개인지모르는int"에 int가 저장되어 있다.
// 모두 몇 개인지 출력하라.			1000'0000
// 가장 큰 값을 찾아 화면에 출력하라.	19'9999'9812
// 가장 작은 값을 찾아라.				-19'9999'9882

//--------
int main()
//--------
{
	std::ifstream in{ "몇개인지모르는int" };

	if (not in) {
		return 20251510;
	}

	int num;
	unsigned cnt{};
	int maxValue{ numeric_limits<int>::min() };
	int minValue{ numeric_limits<int>::max() };
	while (in >> num) {
		++cnt;
		if (maxValue < num)
			maxValue = num;
		if (minValue > num)
			minValue = num;
	}

	cout << "저장된 int의 개수 - " << cnt << endl;
	cout << "가장 큰 값        - " << maxValue << endl;
	cout << "가장 작은 값      - " << minValue << endl;

	//save("main.cpp");
}

// 집에서 해보기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <print>
#include "save.h"
using namespace std;

static int nums[1000'0000];

// [문제] "몇개인지모르는int"에 정확하게 1000만개의 int가 저장되어 있다.
// 오름차순으로 정렬하고 20칸마다 한 개씩 모두 출력하라.

//--------
int main()
//--------
{
	std::ifstream in{ "몇개인지모르는int" };

	if (not in) {
		return 20251510;
	}

	int num;
	unsigned cnt{};
	cout << "1" << endl;
	while (in >> num) {
		nums[cnt] = num;
		++cnt;
	}
	cout << "nums 완료" << endl;

	
	cout << "정렬 완료" << endl;

	for (int i = 0; i < 1000'0000; ++i) {
		print("{:20}", nums[i]);
	}

	//save("main.cpp");
}

//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 15 월요일                                             (6주 2일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <print>
#include "save.h"
using namespace std;

// [문제] "몇개인지모르는int"에 정확하게 1000만개의 int가 저장되어 있다.
// 오름차순으로 정렬하고 20칸마다 한 개씩 모두 출력하라.

int nums[1000'0000];

int ascending_order(const void* a, const void* b)
{
	int x = *(int*)a;
	int y = *(int*)b;

	if (x < y)
		return -1;
	if (x > y)
		return 1;
	return 0;
}

//--------
int main()
//--------
{

	std::ifstream in{ "몇개인지모르는int" };

	if (not in) {
		return 20251510;
	}

	int num;
	unsigned cnt{};
	while (in >> num) {
		nums[cnt] = num;
		++cnt;
	}

	cout << "cnt = " << cnt << "\n";

	qsort(nums, 1000'0000, sizeof(int), ascending_order);

	for (int i = 0; i < 1000'0000; ++i) {
		print("{:20}", nums[i]);
	}

	//save("main.cpp");
}

// 파일의 마지막엔 EOF(End Of File)
// file pointer

============================================================================================================= 25.10.20

// 개수를 알고있는
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <print>
#include "save.h"
using namespace std;

// [문제] "몇개인지모르는int"에 정확하게 1000만개의 int가 저장되어 있다.
// 오름차순으로 정렬하고 20칸마다 한 개씩 모두 출력하라.
const int NUM{ 1000'0000 };
int x[NUM];

int ascending_order(const void*, const void*);

//--------
int main()
//--------
{

	std::ifstream in{ "몇개인지모르는int" };

	if (not in) {
		cout << "파일을 열 수 없다" << endl;
		return 20251510;
	}

	/*int num;
	unsigned cnt{};
	while (in >> num) {
		x[cnt] = num;
		++cnt;
	}*/

	for (int i = 0; i < NUM; ++i)
		in >> x[i];
	
	// 오름차순 정렬
	cout << "정렬 중";
	qsort(x, NUM, sizeof(int), ascending_order);
	cout << '\r' << "정렬 끝" << endl;

	for (int i = 0; i < NUM; ++i) {
		print("{:20}", x[i]);
	}

	//save("main.cpp");
}

int ascending_order(const void* a, const void* b)
{
	int x = *(int*)a;
	int y = *(int*)b;

	if (x < y)
		return -1;
	if (x > y)
		return 1;
	return 0;
}

// 왜 -로 구현하면 이상하게 작동하는가?
//int ascending_order(const void* a, const void* b)
//{
//	return *(int*)a - *(int*)b;
//}

// 파일의 알파벳 개수 세기 my ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 지금 코딩하는 파일은 "main.cpp"이다.
// 여기에 알파벳 소문자의 개수를 세서 다음과 같이 출력하라.
// a - 10
// b - 3
// 중간 생략
// z - 1

//--------
int main()
//--------
{
	ifstream in{ "main.cpp" };

	if (not in) {
		cout << "파일을 열 수 없다" << endl;
		return 20251510;
	}

	char letter;
	int x[26]{ };
	while (in >> letter) {
		if (letter >= 'a' && letter <= 'z') {
			x[letter - 'a'] += 1;
		}
	}

	for (int i = 0; i < 26; ++i) {
		cout << char('a' + i) << " - " << x[i] << endl;
	}

	//save("main.cpp");
}

// 파일의 알파벳 개수 세기 교수님 ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 지금 코딩하는 파일은 "main.cpp"이다.
// 여기에 알파벳 소문자의 개수를 세서 다음과 같이 출력하라.
// a - 10
// b - 3
// 중간 생략
// z - 1

//--------
int main()
//--------
{
	ifstream in { "main.cpp" };

	if (not in) {
		cout << "파일을 열 수 없다" << endl;
		return 0;
	}

	char c;
	int alpha[26] { };							//array <int, 26>;
	while ( in >> c ) {							// input file에서 한글자씩 끝까지 읽어와라
		if (islower(c)) {
			++alpha[c - 'a'];
		}
	}

	for (int i = 0; i < 26; ++i) {
		cout << static_cast<char>(i + 'a') << " - " << alpha[i] << endl;	// type casting char(i + 'a') 보다는 --> static_cast<char>(i + 'a')로 사용하기
	}

	//save("main.cpp");
}

// 소문자 입력받고 개수 출력 my ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 사용자가 원하는 소문자를 입력받아라.
// 이때 파일 "2025 2학기 C++ 강의저장.txt"에
// 그 소문자가 몇 개나 저장되어 있나 세서 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	ifstream in { "2025 2학기 C++ 강의저장.txt" };

	if (not in) {
		cout << "파일을 열 수 없다" << endl;
		return 0;
	}

	char c;
	int alpha[26] { };							//array <int, 26>;
	while ( in >> c ) {							// input file에서 한글자씩 끝까지 읽어와라
		if (islower(c)) {
			++alpha[c - 'a'];
		}
	}

	char x;
	
	while (true) {
		cout << "원하는 소문자를 입력하시오 : ";
		cin >> x;
		if (islower(x)) {
			cout << static_cast<char>(x) << " - " << alpha[x - 'a'] << endl;
		}
		else {
			cout << "소문자가 아닙니다."<< endl;
		}
	}

	//save("main.cpp");
}

// 소문자 입력받고 개수 출력 교수님 ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] 사용자가 원하는 소문자를 입력받아라.
// 이때 파일 "2025 2학기 C++ 강의저장.txt"에
// 그 소문자가 몇 개나 저장되어 있나 세서 출력하라.
// 이 과정을 영원히 반복하라.

//--------
int main()
//--------
{
	//save("main.cpp");

	while ( true ) {
		cout << "찾을 소문자는? ";
		char charToFind;
		cin >> charToFind;

		ifstream in{ "2025 2학기 C++ 강의저장.txt" };

		if (not in) {
			cout << "파일 실패" << endl;
			return 20251020;
		}

		char c;
		unsigned cnt{};
		while (in >> c) {
			if (c == charToFind) {
				++cnt;
			}
		}

		cout << charToFind << "의 개수 - " << cnt << endl;
	}
}

// 파일에 있는 소문자를 대문자로 저장하기 my ver. 
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "main.cpp"에 있는 소문자를 모두 대문자로 바꾸어 저장한 파일 "대문자.cpp"를
// 만들어라.
// (힌트) toupper 함수를 사용하면 소문자를 대문자로 바꿀수 있다.

//--------
int main()
//--------
{
	ifstream in{ "main.cpp" };

	if (not in) {
		cout << "파일 실패" << endl;
		return 20251020;
	}

	in >> std::noskipws;

	ofstream out{ "대문자.cpp" };

	char c;
	while (in >> c) {
		if (islower(c)) {
			c = toupper(c);
		}
		out << c;
	}
	//save("main.cpp");
}

// 파일에 있는 소문자를 대문자로 저장하기 교수님 ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "main.cpp"에 있는 소문자를 모두 대문자로 바꾸어 저장한 파일 "대문자.cpp"를
// 만들어라.
// (힌트) toupper 함수를 사용하면 소문자를 대문자로 바꿀수 있다.

//--------
int main()
//--------
{
	ifstream in{ "main.cpp" };
	if (not in) {
		return 20251020;
	}

	ofstream out{ "대문자.cpp" };
	
	char c;
	in >> std::noskipws;		// in에서 읽어오는 과정에서 공백이 무시되기 때문에 noskipws로 방지한다.
	while (in >> c) {			// 입력파일에서 한 글자씩 읽어서
		c = toupper(c);			// 글자중에 소문자라면 대문자로 바꾼다
		out << c;				// 읽은 모든 글자를 쓸 파일에 기록
	}

	//save("main.cpp");
}

// 파일의 단어 개수 세기 my ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include "save.h"
using namespace std;

// [문제] "main.cpp"에 몇 단어가 있는 지 출력하라.
// (단어) 공백으로 분리된 문자 집합을 말한다.

//--------
int main()
//--------
{
	ifstream in{ "main.cpp" };
	if (not in) {
		return 20251020;
	}

	std::string word;
	unsigned cnt{};
	while (in >> word) {
		++cnt;
	}

	cout << "단어의 개수 - " << cnt << endl;

	//save("main.cpp");
}

// 파일의 단어 개수 세기 교수님 ver.
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

// [문제] "main.cpp"에 몇 단어가 있는 지 출력하라.
// (단어) 공백으로 분리된 문자 집합을 말한다.

//--------
int main()
//--------
{
	ifstream in{ "main.cpp" };
	if (not in) {
		return 20251020;
	}

	std::string str;
	unsigned cnt{};
	while (in >> str) {
		cout << str << endl;		// 읽은 단어 출력
		++cnt;
	}

	cout << "단어의 수 - " << cnt << endl;

	//save("main.cpp");
}

// 파일의 단어를 오름차순으로 정렬하기
//-----------------------------------------------------------------------------------------------------------
// 2025 2학기 C++ 월56수78					10. 20 월요일                                             (7주 1일)
// 10/27 - 8주 1일 중간시험
//-----------------------------------------------------------------------------------------------------------
// FILE I/O
//----------------------------------------------------------------------------------------------------------
#include <iostream>
#include <fstream>
#include <string>
#include "save.h"
using namespace std;

// [문제] "main.cpp"에 몇 단어가 있는 지 출력하라.
// (단어) 공백으로 분리된 문자 집합을 말한다.
// 이제 몇 개의 단어인지 알았다.
// 이 단어들을 메모리에 모두 저장하면 qsort 할 수 있다.
// 오름차순으로 정렬한 후 화면 출력하라.

//--------
int main()
//--------
{
	unsigned cnt{};			// 단어의 수를 여기에 저장
	{
		ifstream in{ "main.cpp" };
		if (not in) {
			return 20251020;
		}

		std::string str;
		
		while (in >> str)
			++cnt;
	}

	// 이제 몇 단어인지 run-time에 알 수 있다.

	//save("main.cpp");
}

// islower(), toupper()